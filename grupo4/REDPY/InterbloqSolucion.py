# Importamos los m√≥dulos necesarios
import threading  
import time       

# C√≥digos ANSI para colorear la salida del terminal (mejor presentaci√≥n visual)
ROJO = "\033[91m"
AZUL = "\033[94m"
VERDE = "\033[92m"
AMARILLO = "\033[93m"
RESET = "\033[0m"  # C√≥digo para resetear al color por defecto

# Declaraci√≥n de los recursos compartidos (bloqueos)
# Simulan dispositivos f√≠sicos como una impresora y un esc√°ner
# Ambos procesos deben adquirirlos para completar su tarea
impresora = threading.Lock()
escaner = threading.Lock()

# Funci√≥n auxiliar que simula una barra de progreso al bloquear un recurso
# Imprime la etiqueta en color con una animaci√≥n simple
def barra_progreso(etiqueta, color):
    for _ in range(3):
        print(f"{color}{etiqueta} [{'=' * (_ + 1):<3}]{RESET}", end='\r')  # Sobrescribe la l√≠nea
        time.sleep(0.3)  # Espera corta entre pasos de animaci√≥n
    print()  # Salto de l√≠nea final

# Funci√≥n auxiliar que imprime una l√≠nea separadora
def separador():
    print(f"{AMARILLO}" + "-" * 60 + f"{RESET}")

# Primer proceso (hilo): bloquea primero la impresora y luego el esc√°ner
def proceso1():
    print(f"{ROJO}üî¥ [Proceso 1] Iniciando...{RESET}")
    
    print(f"{ROJO}üîí [Proceso 1] Intentando bloquear IMPRESORA...{RESET}")
    with impresora:  # Solicita acceso exclusivo a la impresora
        barra_progreso("üñ®Ô∏è  Bloqueando impresora", ROJO)
        print(f"{ROJO}‚úÖ [Proceso 1] Impresora bloqueada.{RESET}")
        time.sleep(1)  # Simula trabajo con la impresora

        print(f"{ROJO}üîí [Proceso 1] Intentando bloquear ESC√ÅNER...{RESET}")
        with escaner:  # Solicita acceso al esc√°ner luego de tener la impresora
            barra_progreso("üì†  Bloqueando esc√°ner", ROJO)
            print(f"{ROJO}‚úÖ [Proceso 1] Esc√°ner bloqueado.{RESET}")
            print(f"{ROJO}üßæ [Proceso 1] Usando impresora + esc√°ner...{RESET}")
            time.sleep(1)  # Simula trabajo conjunto

        # Al salir del bloque 'with', el esc√°ner se libera autom√°ticamente
        print(f"{ROJO}üîì [Proceso 1] Esc√°ner liberado.{RESET}")

    # Al salir del primer bloque 'with', la impresora tambi√©n se libera
    print(f"{ROJO}üîì [Proceso 1] Impresora liberada.{RESET}")
    print(f"{ROJO}üèÅ [Proceso 1] Finalizado.\n{RESET}")
    separador()

# Segundo proceso (hilo): tambi√©n bloquea impresora primero, luego el esc√°ner
# Al tener el mismo orden que el proceso1, se evita interbloqueo
def proceso2():
    print(f"{AZUL}üîµ [Proceso 2] Iniciando...{RESET}")
    
    print(f"{AZUL}üîí [Proceso 2] Intentando bloquear IMPRESORA...{RESET}")
    with impresora:  # Bloquea la impresora como primer recurso
        barra_progreso("üñ®Ô∏è  Bloqueando impresora", AZUL)
        print(f"{AZUL}‚úÖ [Proceso 2] Impresora bloqueada.{RESET}")
        time.sleep(1)

        print(f"{AZUL}üîí [Proceso 2] Intentando bloquear ESC√ÅNER...{RESET}")
        with escaner:  # Luego accede al esc√°ner
            barra_progreso("üì†  Bloqueando esc√°ner", AZUL)
            print(f"{AZUL}‚úÖ [Proceso 2] Esc√°ner bloqueado.{RESET}")
            print(f"{AZUL}üßæ [Proceso 2] Usando impresora + esc√°ner...{RESET}")
            time.sleep(1)

        # Se libera esc√°ner
        print(f"{AZUL}üîì [Proceso 2] Esc√°ner liberado.{RESET}")

    # Se libera impresora
    print(f"{AZUL}üîì [Proceso 2] Impresora liberada.{RESET}")
    print(f"{AZUL}üèÅ [Proceso 2] Finalizado.\n{RESET}")
    separador()

# Registro del tiempo inicial para calcular la duraci√≥n total del programa
inicio_global = time.time()

# Se crean dos hilos, cada uno ejecutar√° un proceso
t1 = threading.Thread(target=proceso1)
t2 = threading.Thread(target=proceso2)

# T√≠tulo inicial del programa
print(f"{VERDE}=== Simulaci√≥n de procesos con orden consistente para evitar interbloqueo ==={RESET}")
separador()

# Se inicia la ejecuci√≥n paralela de ambos procesos
t1.start()
t2.start()

# Espera a que ambos procesos terminen antes de continuar
t1.join()
t2.join()

# Registro del tiempo final
fin_global = time.time()

# Mensaje final indicando √©xito y duraci√≥n total
print(f"{VERDE}‚úÖ Ambos procesos han finalizado correctamente sin interbloqueo.{RESET}")
print()
print(f"{VERDE}üí° Esto ocurri√≥ porque ambos procesos solicitaron los recursos en el mismo orden:")
print(f"   primero la impresora y luego el esc√°ner.")
print(f"   Al mantener este orden, se evita una espera circular,")
print(f"   una de las condiciones necesarias para que ocurra un interbloqueo.{RESET}")
print()
print(f"{VERDE}‚è±Ô∏è Tiempo total del programa: {fin_global - inicio_global:.2f} segundos{RESET}")

