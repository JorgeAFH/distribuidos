import threading  # Para manejar hilos de ejecuci√≥n simult√°nea
import time       # Para simular demoras con sleep()

# Colores ANSI para mejorar la salida en consola con colores
ROJO = "\033[91m"
AZUL = "\033[94m"
AMARILLO = "\033[93m"
VERDE = "\033[92m"
RESET = "\033[0m"  # Resetear el color a predeterminado

# Separadores visuales para la salida en consola
SEPARADOR = f"{AMARILLO}\n{'‚ïê'*60}{RESET}"  # L√≠nea amarilla horizontal
TITULO = f"{AMARILLO}{'='*20} SIMULACI√ìN DE INTERBLOQUEO {'='*20}{RESET}"

# Definici√≥n de los recursos compartidos simulados
# Estos podr√≠an representar dispositivos f√≠sicos como una impresora y un esc√°ner
impresora = threading.Lock()
escaner = threading.Lock()

# Proceso 1: solicita primero la impresora y luego el esc√°ner
def proceso1():
    print(SEPARADOR)
    print(f"{ROJO}[Proceso 1] üñ®Ô∏è Solicitando acceso a la impresora...{RESET}")
    
    # Bloquea el recurso 'impresora'
    with impresora:
        print(f"{ROJO}[Proceso 1] üîí Impresora bloqueada con √©xito.{RESET}")
        time.sleep(1)  # Simula trabajo con la impresora antes de pedir el siguiente recurso
        
        print(f"{ROJO}[Proceso 1] üì† Solicitando acceso al esc√°ner...{RESET}")
        
        # Intenta bloquear el recurso 'escaner'
        with escaner:
            print(f"{ROJO}[Proceso 1] üîí Esc√°ner bloqueado con √©xito.{RESET}")
            print(f"{ROJO}[Proceso 1] üßæ Utilizando impresora y esc√°ner...{RESET}")
        
        # Esc√°ner se libera al salir del bloque 'with'
        print(f"{ROJO}[Proceso 1] üîì Esc√°ner liberado.{RESET}")
    
    # Impresora se libera al salir del primer bloque 'with'
    print(f"{ROJO}[Proceso 1] üîì Impresora liberada. ‚úÖ Proceso 1 finalizado.{RESET}")
    print(SEPARADOR)

# Proceso 2: solicita primero el esc√°ner y luego la impresora (orden inverso al proceso1)
def proceso2():
    print(SEPARADOR)
    print(f"{AZUL}[Proceso 2] üì† Solicitando acceso al esc√°ner...{RESET}")
    
    # Bloquea el recurso 'escaner'
    with escaner:
        print(f"{AZUL}[Proceso 2] üîí Esc√°ner bloqueado con √©xito.{RESET}")
        time.sleep(1)  # Simula trabajo con el esc√°ner antes de pedir el siguiente recurso
        
        print(f"{AZUL}[Proceso 2] üñ®Ô∏è Solicitando acceso a la impresora...{RESET}")
        
        # Intenta bloquear el recurso 'impresora'
        with impresora:
            print(f"{AZUL}[Proceso 2] üîí Impresora bloqueada con √©xito.{RESET}")
            print(f"{AZUL}[Proceso 2] üßæ Utilizando esc√°ner e impresora...{RESET}")
        
        # Impresora se libera al salir del bloque 'with'
        print(f"{AZUL}[Proceso 2] üîì Impresora liberada.{RESET}")
    
    # Esc√°ner se libera al salir del primer bloque 'with'
    print(f"{AZUL}[Proceso 2] üîì Esc√°ner liberado. ‚úÖ Proceso 2 finalizado.{RESET}")
    print(SEPARADOR)

# Crear los hilos que ejecutar√°n cada proceso en paralelo
t1 = threading.Thread(target=proceso1)
t2 = threading.Thread(target=proceso2)


print(TITULO)
print(f"{AMARILLO}üö¶ Iniciando ejecuci√≥n de procesos... Posible interbloqueo en camino.{RESET}")
print(SEPARADOR)

# Iniciar la ejecuci√≥n concurrente de los procesos
t1.start()
t2.start()

# Esperamos hasta 5 segundos a que ambos hilos terminen
# Si se bloquean entre s√≠, seguir√°n vivos despu√©s del timeout
t1.join(timeout=5)
t2.join(timeout=5)

# Evaluamos si los procesos siguen vivos (lo que indica un posible interbloqueo)
print(SEPARADOR)
if t1.is_alive() or t2.is_alive():
    # Al menos uno no ha terminado => est√°n esperando recursos entre s√≠ (deadlock)
    print(f"{ROJO}üõë INTERBLOQUEO DETECTADO{RESET}")
    print()
    print(f"{ROJO}üîÑ Esto ocurri√≥ porque los procesos adquirieron los recursos en distinto orden:{RESET}")
    print(f"{ROJO}   - Proceso 1 bloque√≥ primero la impresora y luego intent√≥ acceder al esc√°ner.{RESET}")
    print(f"{ROJO}   - Proceso 2 bloque√≥ primero el esc√°ner y luego intent√≥ acceder a la impresora.{RESET}")
    print()
    print(f"{ROJO}üß± Esto provoc√≥ una espera circular: cada proceso qued√≥ esperando un recurso{RESET}")
    print(f"{ROJO}   que el otro ya ten√≠a bloqueado, sin posibilidad de continuar.{RESET}")
    print()
    print(f"{AMARILLO}üí° Sugerencia: para evitar este tipo de interbloqueos, se debe garantizar{RESET}")
    print(f"{AMARILLO}   que todos los procesos adquieran los recursos en el mismo orden.{RESET}")
else:
    # Ambos procesos lograron terminar sin quedar esperando
    print(f"{VERDE}‚úÖ EJECUCI√ìN EXITOSA: Ambos procesos finalizaron sin interbloqueo.{RESET}")
print(SEPARADOR)
